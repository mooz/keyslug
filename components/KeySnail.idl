#include "nsISupports.idl"

interface nsIDOMElement;
interface nsIDOMEvent;
interface nsIDOMEventTarget;
interface nsILocalFile;
interface nsIVariant;
interface mozIStorageConnection;

interface xdIGestureService;

[scriptable, uuid(956a5953-639e-49da-9d77-0b8ef930f15a)]
interface ksIScriptHandler : nsISupports
{
    /**
     * Registers a mapping to service for later use.
     * @param aID   The id of the mapping to identify it. It must equal to 
     *              the database table name which preserves the user mapping.
     * @param aURI  The URI of RDF datasource which preserves the default mapping.
     * @param aName The name of the mapping.
     */
    void registerMapping(in AUTF8String aID, in string aURI, in AUTF8String aName);

    /**
     * Returns a registered mapping from service.
     * At the first-time calling, creates instance of xdIGestureMapping and initializes it.
     * @throws NS_ERROR_NOT_INITIALIZED if the mapping is not registered.
     */
    xdIGestureMapping getMapping(in AUTF8String aID);

    /**
     * A special version of getMapping, which returns the mapping for browser.
     */
    xdIGestureMapping getMappingForBrowser();

    /**
     * Returns meta data of all registered mappings.
     */
    nsIVariant getMappingsInfo();

    /**
     * Backups all user mappings to a file.
     */
    void backupMappings(in nsILocalFile aFile);

    /**
     * Restores all user mappings from a file.
     */
    void restoreMappings(in nsILocalFile aFile);

    /**
     * Returns database connection.
     * @param aForceOpen false: Returns null if database file doesn't exist.
     *                   true : Returns connection regardless of the file existence.
     */
    mozIStorageConnection getDBConnection(in boolean aForceOpen);

    /**
     * Returns localized string from string bundle.
     */
    wstring getLocaleString(in wstring aName);

};

const Cc = Components.classes;
const Ci = Components.interfaces;
const prefService = Cc['@mozilla.org/preferences;1']
    .getService(Ci.nsIPrefBranch);

Components.utils.import("resource://gre/modules/XPCOMUtils.jsm");

function ksScriptHandler() {
    // initialization
}

ksScriptHandler.prototype = {
    classDescription: "KeySnail Script Handler",
    contractID: "@github.com/mooz/keysnail/script;1",
    classID: Components.ID("{956a5953-639e-49da-9d77-0b8ef930f15a}"),
    // nsISupports is implicitly added
    QueryInterface: XPCOMUtils.generateQI([Ci.ksIScriptHandler]),

    // ==== user configuration file name ====
    // at first .keysnail.js is used. When the file not found,
    // then the _keysnail.js is used. (for Windows user)
    defaultInitFileNames: [".keysnail.js", "_keysnail.js"],

    directoryDelimiter: null,

    // init file base
    prefDirectory: null,
    // if specified, use this path
    userPath: null,
    // pathes user script loaded from

    // ============================================================ //

    init: function () {
        [this.prefDirectory, this.directoryDelimiter]
            = this.getPrefDirectory();

        this.load();
    },

    isDirHasFiles: function (aPath, aDirectoryDelimiter, aFileNames) {
        var file;

        for (var i in aFileNames) {
            file = this.openFile(aPath
                                 + aDirectoryDelimiter
                                 + aFileNames[i]);
            if (file.exists()) {
                return true;
            }
        }

        return false;
    },

    openFile: function (aPath) {
        var file = Cc["@mozilla.org/file/local;1"].createInstance(Ci.nsILocalFile);
        file.initWithPath(aPath);
        return file;
    },

    getEnv: function (aName) {
        var env = Components.classes['@mozilla.org/process/environment;1']
            .getService(Components.interfaces.nsIEnvironment);

        return env.exists(aName) ? env.get(aName) : null;
    },

    getSystemInfo: function () {
        return Components.classes['@mozilla.org/system-info;1'].
            getService(Components.interfaces.nsIPropertyBag2);
    },

    getPrefDirectory: function () {
        var pref = null;
        var delimiter = null;
        var osName = this.getSystemInfo().getProperty("name");

        if (osName.search(/windows/i) != -1) {
            pref = this.getEnv("USERPROFILE");
            delimiter = "\\";
        } else {
            pref = this.getEnv("HOME");
            delimiter = "/";
        }

        return [pref, delimiter];
    },

    _xpcom_factory : {
        createInstance: function(aOuter, aIID) {
            if (aOuter != null) {
                throw Components.results.NS_ERROR_NO_AGGREGATION;
            }
            return (new ksScriptHandler()).QueryInterface(aIID);
        },
        QueryInterface: XPCOMUtils.generateQI([Components.interfaces.nsIFactory])
    }
};

function NSGetModule(aCompMgr, aFileSpec) {
    return XPCOMUtils.generateModule([ksScriptHandler]);
}
